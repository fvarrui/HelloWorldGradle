buildscript {
	repositories {
        mavenCentral()
		maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
	}
	dependencies {
		classpath 'io.github.fvarrui:javapackager:1.7.5'
	}
}

plugins {
    id 'java'
    id 'maven-publish'
	id 'com.github.ben-manes.versions' version '0.42.0'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

dependencies {
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.openjfx:javafx-base:22'
    implementation 'org.openjfx:javafx-base:22:win'
    implementation 'org.openjfx:javafx-controls:22'
    implementation 'org.openjfx:javafx-controls:22:win'
    implementation 'org.openjfx:javafx-graphics:22'
    implementation 'org.openjfx:javafx-graphics:22:win'
    implementation fileTree(include: ["*.jar"], dir: "libs")
}

import io.github.fvarrui.javapackager.gradle.PackageTask;
import io.github.fvarrui.javapackager.model.*;

group = 'io.github.fvarrui'
version = '1.0.0'
description = 'HelloWorld for Gradle'
sourceCompatibility = '9'
compileJava.options.encoding = 'UTF-8'

javapackager {
	mainClass = 'io.github.fvarrui.helloworld.Main'
	additionalResources = [ file('src/main/resources/info.txt') ]
	bundleJre = true
	generateInstaller = true
    vmArgs = ["-Djava.library.path=."]
    administratorRequired = false
}

task packageForWindows(type: PackageTask, dependsOn: build) {
	description = 'Packages the application as a native Windows executable and bundles it in a zipball'
	platform = 'windows'
	vmArgs = [
            '--module-path=libs',
            '--add-modules=javafx.graphics,javafx.controls,javafx.base',
	]
	winConfig {
		headerType = 'console'
		exeCreationTool = 'launch4j'
		generateSetup = false
		generateMsi = false
		registry = new Registry([
			entries: [
				new RegistryEntry([
					key: "HKCU:MyGradleApp",		
					valueName: "greeting",		
					valueType: ValueType.REG_SZ,		
					valueData: "hello"
				])
			]
		])
        icoFile = file("windows/HelloWorldGradle.ico")
        /*
        setupMode = SetupMode.askTheUser
        removeOldLibs = true
        disableDirPage = false
        disableFinishedPage = false
        disableWelcomePage = false
        createDesktopIconTask = false
        */
    }
}

task packageForLinux(type: PackageTask, dependsOn: build) {
	description = 'Packages the application as a native GNU/Linux executable and bundles it in a tarball'
	platform = 'linux'
	bundleJre = true
	createTarball = true
	scripts {
		bootstrap = file('assets/bootstrap.sh')
	}
}

task packageForMac(type: PackageTask, dependsOn: build) {
	description = 'Packages the application as a native Mac OS app and bundles it in a tarball'
	platform = 'mac'
	createTarball = true
	scripts {
		bootstrap = file('assets/bootstrap.sh')
	}
	macConfig {
		infoPlist.additionalEntries = '''
			<key>LSUIElement</key>
			<true/>
		'''
	}
}

task packageForAllPlatforms(dependsOn: [ packageForWindows, packageForMac, packageForLinux ]) {
	description = 'Packages the application for all platforms'
	group = 'JavaPackager'
}

